/**     Программа для расчета полных и удельных переменных затрат предприятия с одним центром затрат,
        построена с использованием библиотеки "Free Operation Manager 2" (библиотека FROMA2).
**/

/****************************************************************************************************/
/****************************************************************************************************/
/*** 																						      ***/
/***   Copyright © 2025 Пидкасистый Александр Павлович										      ***/
/*** 																						      ***/
/***   Данная лицензия разрешает лицам, получившим копию данного программного обеспечения и	      ***/
/***   сопутствующей документации (далее — Программное обеспечение), безвозмездно использовать    ***/
/***   Программное обеспечение без ограничений, включая неограниченное право на использование,    ***/
/***   копирование, изменение, слияние, публикацию, распространение, сублицензирование и/или      ***/
/***   продажу копий Программного обеспечения, а также лицам, которым предоставляется данное      ***/
/***   Программное обеспечение, при соблюдении следующих условий:								  ***/
/*** 																					      	  ***/
/***   Указанное выше уведомление об авторском праве и данные условия должны быть включены во	  ***/
/***   все копии или значимые части данного Программного обеспечения.							  ***/
/*** 																						      ***/
/***   ДАННОЕ ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ «КАК ЕСТЬ», БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ, ЯВНО   ***/
/***   ВЫРАЖЕННЫХ ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ ГАРАНТИИ ТОВАРНОЙ ПРИГОДНОСТИ, СООТВЕТСТВИЯ ПО	  ***/
/***   ЕГО КОНКРЕТНОМУ НАЗНАЧЕНИЮ И ОТСУТСТВИЯ НАРУШЕНИЙ, НО НЕ ОГРАНИЧИВАЯСЬ ИМИ. НИ В КАКОМ	  ***/
/***   СЛУЧАЕ АВТОРЫ ИЛИ ПРАВООБЛАДАТЕЛИ НЕ НЕСУТ ОТВЕТСТВЕННОСТИ ПО КАКИМ-ЛИБО ИСКАМ, ЗА УЩЕРБ   ***/
/***   ИЛИ ПО ИНЫМ ТРЕБОВАНИЯМ, В ТОМ ЧИСЛЕ, ПРИ ДЕЙСТВИИ КОНТРАКТА, ДЕЛИКТЕ ИЛИ ИНОЙ СИТУАЦИИ,   ***/
/***   ВОЗНИКШИМ ИЗ-ЗА ИСПОЛЬЗОВАНИЯ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ ИЛИ ИНЫХ ДЕЙСТВИЙ С ПРОГРАММНЫМ     ***/
/***   ОБЕСПЕЧЕНИЕМ.																			  ***/
/*** 																						      ***/
/****************************************************************************************************/
/****************************************************************************************************/

#define cmeth seq

#include <iostream>                 // Ввод и вывод на экран
#include <string>                   // Работа со строками
#include <sstream>                  // Работа со строковыми потоками
#include <functional>               // Работа с функциональными объектами
#include "common_values.hpp"        // Общие типы и методы библиотеки FROMA2
#include "clsEnterprise.h"          // Основной класс программы
#include "pathes.h"                 // Пути к файлам

using namespace std;

enum Clc_type{seq = sZero, fut, thrd};              // Сепаратор выбора типа вычислений: последовательные,
                                                    // в асинхронных потоках или синхронных

int main(int argc, char* argv[]) {

    setlocale(LC_ALL, "Russian");                   // Установка русского языка для вывода
    clsEnterprise* Company = new clsEnterprise();   // Создаем экземпляр объекта - проект

/****************************************************************************************************/
/**                             Вывод заголовка программы на экран                                 **/
/****************************************************************************************************/

    string ProgramHeader = "Программа для расчета полных и удельных переменных затрат Model_1";
    nmRePrint::PrintHeader0(cout, nmRePrint::smblcunt+nmRePrint::uThree, ProgramHeader);

/****************************************************************************************************/
/**               Импортируем конфигурацию, исходные данные и вводим общие параметры               **/
/****************************************************************************************************/

    if(!Company->Import_Data()) {                   // Импортируем конфигурацию и данные
        cout << "Импорт данных неудачен\n";         // Если импорт неудачен, то
        delete Company;                             // удаляем объет,
        return EXIT_FAILURE;                        // выходим из программы с кодом неудачного завершения
    }

// TODO (Alexandr Pidkasisty#1#09/25/25): Здесь должен быть вызов общего метода RUN или EXECUTE
/****************************************************************************************************/
/**                      Вводим данные для склада готовой продукции и рассчитываем склад           **/
/****************************************************************************************************/

    if(!Company->SetWarehouse()) {                  // Создаем склад готовой продукции (СГП). Если не создан
        cout << "Не удалось создать склад готовой продукции\n";
        delete Company;                             // то удаляем объет,
        return EXIT_FAILURE;                        // и выходим из программы с кодом неудачного завершения
    }
    Company->StockEditSettings(warehouse);          // Редактируем индивидуальные настройки для учета SKU

    if(!Company->StockCalculate(warehouse, cmeth)) { // Расчет потребности в поставках продукции из производства
        cout << "Не удалось сбалансировать поставки и отгрузки\n";
        delete Company;                             // удаляем объет,
        return EXIT_FAILURE;                        // выходим из программы с кодом неудачного завершения
    };

/****************************************************************************************************/
/**               Вводим данные для производства и рассчитываем объем потребления ресурсов         **/
/****************************************************************************************************/

    if(!Company->SetManufactory()) {                    // Создаем производство
        cout << "Не удалось создать производство\n";
        delete Company;                                 // удаляем объет,
        return EXIT_FAILURE;                            // выходим из программы с кодом неудачного завершения
    };
    Company->ManufCalculateIn(cmeth);                    // Расчет потребности в ресурсах для производства

/****************************************************************************************************/
/**                                 Вводим данные для склада сырья и материалов                    **/
/****************************************************************************************************/

    if(!Company->SetRawMatStock()) {                    // Создаем склад сырья и материалов
        cout << "Не удалось создать склад сырья и материалов\n";
        delete Company;                                 // удаляем объет,
        return EXIT_FAILURE;                            // выходим из программы с кодом неудачного завершения
    };
    Company->StockEditSettings(rowmatstock);            // Редактируем индивидуальные настройки для учета SKU

    if(!Company->StockCalculate(rowmatstock, cmeth)) { // Расчет потребности в поставках продукции из производства
        cout << "Не удалось сбалансировать поставки и отгрузки\n";
        delete Company;                             // удаляем объет,
        return EXIT_FAILURE;                        // выходим из программы с кодом неудачного завершения
    };

/****************************************************************************************************/
/**                     Вводим данные о себестоимости сырья и материалов                           **/
/**             в производство и вычисляем производств. себестоимость продуктов                    **/
/****************************************************************************************************/

    if(!Company->RMCostTransmition()) {                 // Передаем цены из ССМ в производство
        cout << "Не удалось передать учетную себестоимость сырья и материалов в производство\n";
        delete Company;                                 // удаляем объет,
        return EXIT_FAILURE;                            // выходим из программы с кодом неудачного завершения
    };

    if(!Company->ManufCalculateOut(cmeth)) {            // Рассчитываем производственную себестоимость
        cout << "Не удалось рассчитать производственную себестоимость продукции\n" << endl;
        delete Company;                                 // удаляем объет,
        return EXIT_FAILURE;                            // выходим из программы с кодом неудачного завершения
    }

/****************************************************************************************************/
/**                 Вводим данные о произв. себест. продукции, поставляемой на СГП                 **/
/**                         и вычисляем себестоимость отгружаемой продукции                        **/
/****************************************************************************************************/

    if(!Company->MWCostTransmition()) {                 // Передаем цены из производства на СГП
        cout << "Не удалось передать учетную себестоимость продукции на СГП\n";
        delete Company;                                 // удаляем объет,
        return EXIT_FAILURE;                            // выходим из программы с кодом неудачного завершения
    };

    if(!Company->StockCalculate(warehouse, cmeth)) {    // Расчет себестоимости отгружаемой продукции
        cout << "Не удалось рассчитать себестоимость отгружаемой продукции\n";
        delete Company;                                 // удаляем объет,
        return EXIT_FAILURE;
    };

/****************************************************************************************************/
/**                           Формирование и вывод отчетов                                         **/
/****************************************************************************************************/

    cout << "Формирую отчет... ";
    string ReportName = V_DIR_REPORTS;                      // Устанавливаем полный путь до файла отчета
    ReportName.append("Model_1");                           // Добавляем имя отчета
    ReportName.push_back('_');                              // Добавляем символ разделителя
    ReportName.append(DBLR_ind());                          // Добавляем признак типа вещественного числа
    Company->SetRName(ReportName);  // Устанавливаем имя файла отчета
    Company->SetDevice(file);       // Устанавливаем устройство для вывода отчета
    Company->Report();              // Общая информация о проекте выводится в отчет

    Company->StockSettingsView(warehouse);                  // Индивидуальные настройки для позиций СГП
    Company->StockSettingsView(rowmatstock);                // Индивидуальные настройки для позиций ССМ

    Company->ReportView(warehouse, shipment, volume);       // Выводим объемы продаж в натуральном измерении
    Company->ReportView(warehouse, balance, volume);        // Выводим остатки в натуральном измерении
    Company->ReportView(warehouse, purchase, volume);       // Выводим объемы поступлений в натуральном измерении

    Company->ReportView(manufactory, manshipment, volume);  // Выводим объемы отгрузки на СГП в натуральном выражении
    Company->ReportView(manufactory, recipe, volume);       // Выводим рецептуры
    Company->ReportView(manufactory, manpurchase, volume);  // Выводим потребность в сырье и материалах

    Company->ReportView(rowmatstock, shipment, volume);     // Выводим объемы поставок сырья и материалов из ССМ в производство
    Company->ReportView(rowmatstock, shipment, value);      // Выводим стоимость поставок сырья и материалов из ССМ в производство
    Company->ReportView(rowmatstock, shipment, price);      // Выводим удельную стоимость поставок сырья и материалов из ССМ в производство

    Company->ReportView(rowmatstock, balance, volume);      // Выводим остатки в натуральном измерении
    Company->ReportView(rowmatstock, balance, value);       // Выводим остатки в стоимостном измерении
    Company->ReportView(rowmatstock, balance, price);       // Выводим остатки в удельном стоимостном измерении

    Company->ReportView(rowmatstock, purchase, volume);     // Выводим остатки в натуральном измерении
    Company->ReportView(rowmatstock, purchase, value);      // Выводим остатки в стоимостном измерении
    Company->ReportView(rowmatstock, purchase, price);      // Выводим остатки в удельном стоимостном измерении

    Company->ReportView(manufactory, manshipment, value);   // Полная себестоимость продукции, поступающая из производства на СГП
    Company->ReportView(manufactory, manshipment, price);   // Удельная себестоимость продукции, поступающая из производства на СГП

    Company->ReportView(warehouse, balance, value);         // Выводим остатки в стоимостном измерении
    Company->ReportView(warehouse, shipment, value);        // Выводим объемы продаж в стоимостном измерении

    cout << "Готово. Отчет выведен в файл " << ReportName << ".txt" << endl;

/****************************************************************************************************/
/**                                                Вывод csv-файлов                                **/
/****************************************************************************************************/

    string outdir = V_DIR_OUTPUTDATA;
    cout << "Экспорт CSV-файлов в папку " << outdir << endl;

    /** warehouse **/

    if(!Company->Export_Storage(outdir + "f_ws_volume", warehouse, shipment, volume)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Storage(outdir + "f_ws_price", warehouse, shipment, price)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Storage(outdir + "f_ws_value", warehouse, shipment, value)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Storage(outdir + "f_wb_volume", warehouse, balance, volume)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Storage(outdir + "f_wb_price", warehouse, balance, price)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Storage(outdir + "f_wb_value", warehouse, balance, value)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Storage(outdir + "f_wp_volume", warehouse, purchase, volume)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Storage(outdir + "f_wp_price", warehouse, purchase, price)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Storage(outdir + "f_wp_value", warehouse, purchase, value)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };

    /** rowmatstock **/
    if(!Company->Export_Storage(outdir + "f_rs_volume", rowmatstock, shipment, volume)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Storage(outdir + "f_rs_price", rowmatstock, shipment, price)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Storage(outdir + "f_rs_value", rowmatstock, shipment, value)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Storage(outdir + "f_rb_volume", rowmatstock, balance, volume)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Storage(outdir + "f_rb_price", rowmatstock, balance, price)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Storage(outdir + "f_rb_value", rowmatstock, balance, value)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Storage(outdir + "f_rp_volume", rowmatstock, purchase, volume)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Storage(outdir + "f_rp_price", rowmatstock, purchase, price)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Storage(outdir + "f_rp_value", rowmatstock, purchase, value)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };

    /** manufactory **/
    if(!Company->Export_Manufactory(outdir + "f_mp_volume", purchase, volume)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    /** Записывать массивы f_mp_price и f_mp_value не имеет смысла, т.к. эти поля в получаемом массиве обнулены **/
    /** Записывать массивы f_mb_volume, f_mb_price и f_mb_value не имеет смысла, т.к. по исходным данным остатки будут нулевыми **/

    if(!Company->Export_Manufactory(outdir + "f_ms_volume", shipment, volume)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Manufactory(outdir + "f_ms_price", shipment, price)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };
    if(!Company->Export_Manufactory(outdir + "f_ms_value", shipment, value)) {   // Выводим таблицы
        cout << "Экспорт исходных данных не удачен\n";              // Если экспорт неудачен, то
        delete Company;                                             // удаляем объет,
        return EXIT_FAILURE;                                        // выходим из программы с кодом неудачного завершения
    };

    cout << "Готово. Массивы экспортированы в файлы" << endl;
    cout << "Copyright (c) 2025 Пидкасистый Александр Павлович" << endl;
    delete Company;                 // Удаляем экземпляр объекта - проект
    return EXIT_SUCCESS;
}
