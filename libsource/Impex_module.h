/**     Этот файл является частью библиотеки программного обеспечения для экономического
        моделирования, финансового анализа и планирования операционной деятельности предприятия
        "Free Operation Manager 2" (библиотека FROMA2).
**/

/****************************************************************************************************/
/****************************************************************************************************/
/*** 																						      ***/
/***   Copyright © 2025 Пидкасистый Александр Павлович										      ***/
/*** 																						      ***/
/***   Данная лицензия разрешает лицам, получившим копию данного программного обеспечения и	      ***/
/***   сопутствующей документации (далее — Программное обеспечение), безвозмездно использовать    ***/
/***   Программное обеспечение без ограничений, включая неограниченное право на использование,    ***/
/***   копирование, изменение, слияние, публикацию, распространение, сублицензирование и/или      ***/
/***   продажу копий Программного обеспечения, а также лицам, которым предоставляется данное      ***/
/***   Программное обеспечение, при соблюдении следующих условий:								  ***/
/*** 																					      	  ***/
/***   Указанное выше уведомление об авторском праве и данные условия должны быть включены во	  ***/
/***   все копии или значимые части данного Программного обеспечения.							  ***/
/*** 																						      ***/
/***   ДАННОЕ ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ПРЕДОСТАВЛЯЕТСЯ «КАК ЕСТЬ», БЕЗ КАКИХ-ЛИБО ГАРАНТИЙ, ЯВНО   ***/
/***   ВЫРАЖЕННЫХ ИЛИ ПОДРАЗУМЕВАЕМЫХ, ВКЛЮЧАЯ ГАРАНТИИ ТОВАРНОЙ ПРИГОДНОСТИ, СООТВЕТСТВИЯ ПО	  ***/
/***   ЕГО КОНКРЕТНОМУ НАЗНАЧЕНИЮ И ОТСУТСТВИЯ НАРУШЕНИЙ, НО НЕ ОГРАНИЧИВАЯСЬ ИМИ. НИ В КАКОМ	  ***/
/***   СЛУЧАЕ АВТОРЫ ИЛИ ПРАВООБЛАДАТЕЛИ НЕ НЕСУТ ОТВЕТСТВЕННОСТИ ПО КАКИМ-ЛИБО ИСКАМ, ЗА УЩЕРБ   ***/
/***   ИЛИ ПО ИНЫМ ТРЕБОВАНИЯМ, В ТОМ ЧИСЛЕ, ПРИ ДЕЙСТВИИ КОНТРАКТА, ДЕЛИКТЕ ИЛИ ИНОЙ СИТУАЦИИ,   ***/
/***   ВОЗНИКШИМ ИЗ-ЗА ИСПОЛЬЗОВАНИЯ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ ИЛИ ИНЫХ ДЕЙСТВИЙ С ПРОГРАММНЫМ     ***/
/***   ОБЕСПЕЧЕНИЕМ.																			  ***/
/*** 																						      ***/
/****************************************************************************************************/
/****************************************************************************************************/

#ifndef FROMA2_CLSIMPEX_H
#define FROMA2_CLSIMPEX_H

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <vector>
#include <iomanip>
#include "common_values.hpp"
#include "LongReal_module.h"

using namespace std;

/*************************************************************************************************************************/
/**                                             Вспомогательные методы                                                  **/
/*************************************************************************************************************************/

void MeasRestore(nmBPTypes::strNameMeas Big[], nmBPTypes::strNameMeas Lit[], const size_t brows, const size_t lrows);
/** Метод заполняет поля с единицами измерения в массиве lit данными из массива Big при совпадении имен в этих массивах.
Параметры: brows - количество строк в массиве Big, lrows - количество строк в массиве Lit. **/

/*************************************************************************************************************************/
/**                        Класс clsImpex для импорта и экспорта информации из cvs-файлов                               **/
/**                 и подготовки исходных данных для объектов типа clsStorage и clsManufactory                          **/
/*************************************************************************************************************************/

class clsImpex
{
    private:
        vector<std::vector<std::string>> m_data;    // Вектор для хранения данных из файла
        size_t m_rowcount, m_colcount;              // Количество строк и столбцов вектора
        char separator;                             // Разделитель

    public:
        clsImpex();                                 // Конструктор по умолчанию
        clsImpex(ifstream& ifs, const char& ch);    // Конструктор с параметрами для импорта из файлового потока.
                                                    // Параметры: ifs - файловый поток на чтение, ch - символ разделителя
                                                    // между данными в файле
        clsImpex(const size_t ncount, const nmBPTypes::strNameMeas names[],\
        const nmBPTypes::strItem data[], const size_t dcount, nmBPTypes::ReportData flg);
                                                    // Конструктор с параметрами для импорта из массивов. Параметры:
                                                    // ncount - число строк, равное числу элементов массива names[],
                                                    // names[] - массив с наименованиями строк и единицами измерения,
                                                    // data[] - одномерный массив,аналог двумерной матрицы размером
                                                    // ncount*dcount с данными; dcount - число столбцов матрицы;
                                                    // flg - флаг, определяющий тип данных: volume, price или value
        ~clsImpex();                                // Деструктор
        clsImpex(const clsImpex& other);            // Конструктор копирования
        clsImpex(clsImpex&& other);                 // Конструктор перемещения
        void swap(clsImpex& other) noexcept;        // Функция обмена значениями между объектами
        clsImpex& operator=(const clsImpex& other); // Перегрузка оператора присваивания копированием
        clsImpex& operator=(clsImpex &&obj);        // Перегрузка оператора присваивания перемещением
        void reset();                               // Сбрасывает состояние объекта до значения по умолчанию
        bool is_Empty() const;                      // Возвращает true, если m_data пустой

        /** Методы импорта **/
        bool Import(ifstream& ifs, const char& ch); // Метод импорта данных из файлового потока. Парпаметры:
                                                    // ifs - файловый поток на чтение, ch - символ разделителя
        bool Import(const size_t ncount, const nmBPTypes::strNameMeas names[],\
        const nmBPTypes::strItem data[], const size_t dcount, nmBPTypes::ReportData flg);  // Метод импорта данных из массивов.
                                                    // Параметры: ncount - число строк, равное числу элементов массива names[],
                                                    // names[] - массив с наименованиями строк и единицами измерения,
                                                    // data[] - одномерный массив,аналог двумерной матрицы размером
                                                    // ncount*dcount с данными; dcount - число столбцов матрицы;
                                                    // flg - флаг, определяющий тип данных: volume, price или value

        /** Методы преобразования **/
        void Transpon();                            // Метод транспонирует матрицу m_data

        /** Методы экспорта **/
        void csvExport(ofstream& ofs) const;        // Метод экспорта вектора в csv-файл с разделителем,
                                                    // заданным в переменной separator

        /** Методы Get **/
        decimal* GetDecimal(const size_t brow, const size_t erow, const size_t bcol,\
        const size_t ecol) const;                   // Метод возвращает выбранные в матрице данные,
                                                    // конвертированные в тип decimal. Параметры:
                                                    // brow - начальная строка данных, erow - конечная строка,
                                                    // bcol - начальный столбец, ecol - конечный столбец.
                                                    // Метод возвращает одномерный динамический массив,
                                                    // являющийся аналогом двумерной матрицы размером
                                                    // (erow-brow+1)*(ecol-bcol+1).
        // ВНИМАНИЕ!!! Для совместимости с параметрами методов классов clsStorage и clsManufactory матрица
        // (в векторе m_data) с импортированными данными должна иметь горизонтальную ориентацию (разные периоды
        // - в разных столбцах). В противном случае перед применением настоящего метода матрицу необходимо транспонировать.

        nmBPTypes::strNameMeas* GetNames(const size_t brow, const size_t erow,const size_t idName,\
        const size_t idMeas) const;                 // Метод возвращает выбранные в матрице данные
                                                    // конвертированные в тип strNameMeas. Параметры:
                                                    // brow - начальная строка данных, erow - конечная строка,
                                                    // idName - номер столбца с названиями, idMeas - номер столбца
                                                    // с единицами измерения. Метод возвращает одномерный
                                                    // динамический массив размером (erow-brow+1).
        // ВНИМАНИЕ!!! Для совместимости с параметрами методов классов clsStorage и clsManufactory матрица
        // (в векторе m_data) с импортированными данными должна иметь горизонтальную ориентацию (разные периоды
        // - в разных столбцах). В противном случае перед применением настоящего метода матрицу необходимо транспонировать.

        string* GetNames(const size_t brow, const size_t erow, const size_t idName) const;
                                                    // Метод возвращает выбранные в матрице данные
                                                    // типа string (тип данных внутреннего хранилища). Параметры:
                                                    // brow - начальная строка данных, erow - конечная строка,
                                                    // idName - номер столбца с названиями. Метод возвращает одномерный
                                                    // динамический массив размером (erow-brow+1).
        // ВНИМАНИЕ!!! Для совместимости с параметрами методов классов clsStorage и clsManufactory матрица
        // (в векторе m_data) с импортированными данными должна иметь горизонтальную ориентацию (разные периоды
        // - в разных столбцах). В противном случае перед применением настоящего метода матрицу необходимо транспонировать.

        nmBPTypes::strItem* GetstrItem(const size_t brow, const size_t erow, const size_t bcol,\
        const size_t ecol, nmBPTypes::ReportData flg) const;    // Метод возвращает выбранные в матрице данные
                                                                // конвертированные в тип strItem. Параметры:
                                                    // brow - начальная строка данных, erow - конечная строка,
                                                    // bcol - начальный столбец, ecol - конечный столбец,
                                                    // flg - - флаг, определяющий тип данных: volume, price или value
                                                    // Метод возвращает одномерный динамический массив,
                                                    // являющийся аналогом двумерной матрицы размером
                                                    // (erow-brow+1)*(ecol-bcol+1).
        // ВНИМАНИЕ!!! Для совместимости с параметрами методов классов clsStorage и clsManufactory матрица
        // (в векторе m_data) с импортированными данными должна иметь горизонтальную ориентацию (разные периоды
        // - в разных столбцах). В противном случае перед применением настоящего метода матрицу необходимо транспонировать.

        size_t GetRowCount() const;                 // Метод возвращает число строк матрицы
        size_t GetColCount() const;                 // Метод возвращает число столбцов матрицы

        /** Методы визуального контроля **/

        void View(ostream& os) const;               // Метод визуального контроля

    protected:

};

#endif // FROMA2_CLSIMPEX_H
